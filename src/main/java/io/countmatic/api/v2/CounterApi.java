/*
 * countmatic api
 * countmatic is a service to provide counters as web service. Sure, counters are simple artefacts of IT systems. But they are part of *every* system. There are numerous use cases where you need distributed enumerators in IoT manufacturing or i.e. production reporting.    Find out more [https://countmatic.io](https://countmatic.io).
 *
 * OpenAPI spec version: 2.0.2
 * Contact: countmaster@countmatic.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.countmatic.api.v2;

import io.countmatic.api.v2.ApiCallback;
import io.countmatic.api.v2.ApiClient;
import io.countmatic.api.v2.ApiException;
import io.countmatic.api.v2.ApiResponse;
import io.countmatic.api.v2.Configuration;
import io.countmatic.api.v2.Pair;
import io.countmatic.api.v2.ProgressRequestBody;
import io.countmatic.api.v2.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.countmatic.api.v2.model.Counter;
import io.countmatic.api.v2.model.Counters;
import io.countmatic.api.v2.model.Error;
import io.countmatic.api.v2.model.Token;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CounterApi {
    private ApiClient apiClient;

    public CounterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CounterApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCounter
     * @param token Your access token (required)
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCounterCall(String token, String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (initialvalue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "initialvalue", initialvalue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCounterValidateBeforeCall(String token, String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling addCounter(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling addCounter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = addCounterCall(token, name, initialvalue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add another counter for your access token, this makes it a so called \&quot;grouptoken\&quot;
     * 
     * @param token Your access token (required)
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counter addCounter(String token, String name, Long initialvalue) throws ApiException {
        ApiResponse<Counter> resp = addCounterWithHttpInfo(token, name, initialvalue);
        return resp.getData();
    }

    /**
     * Add another counter for your access token, this makes it a so called \&quot;grouptoken\&quot;
     * 
     * @param token Your access token (required)
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counter> addCounterWithHttpInfo(String token, String name, Long initialvalue) throws ApiException {
        com.squareup.okhttp.Call call = addCounterValidateBeforeCall(token, name, initialvalue, null, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add another counter for your access token, this makes it a so called \&quot;grouptoken\&quot; (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCounterAsync(String token, String name, Long initialvalue, final ApiCallback<Counter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCounterValidateBeforeCall(token, name, initialvalue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for deleteCounter
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteCounterCall(String token, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteCounterValidateBeforeCall(String token, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling deleteCounter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = deleteCounterCall(token, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete that counter without a trace
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counter deleteCounter(String token, String name) throws ApiException {
        ApiResponse<Counter> resp = deleteCounterWithHttpInfo(token, name);
        return resp.getData();
    }

    /**
     * Delete that counter without a trace
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counter> deleteCounterWithHttpInfo(String token, String name) throws ApiException {
        com.squareup.okhttp.Call call = deleteCounterValidateBeforeCall(token, name, null, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete that counter without a trace (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteCounterAsync(String token, String name, final ApiCallback<Counter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteCounterValidateBeforeCall(token, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getCurrentReading
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getCurrentReadingCall(String token, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/current";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getCurrentReadingValidateBeforeCall(String token, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getCurrentReading(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getCurrentReadingCall(token, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get current reading of the counters for that token
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter (optional)
     * @return Counters
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counters getCurrentReading(String token, String name) throws ApiException {
        ApiResponse<Counters> resp = getCurrentReadingWithHttpInfo(token, name);
        return resp.getData();
    }

    /**
     * Get current reading of the counters for that token
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter (optional)
     * @return ApiResponse&lt;Counters&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counters> getCurrentReadingWithHttpInfo(String token, String name) throws ApiException {
        com.squareup.okhttp.Call call = getCurrentReadingValidateBeforeCall(token, name, null, null);
        Type localVarReturnType = new TypeToken<Counters>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current reading of the counters for that token (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getCurrentReadingAsync(String token, String name, final ApiCallback<Counters> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getCurrentReadingValidateBeforeCall(token, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counters>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getNewCounter
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getNewCounterCall(String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/new";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (initialvalue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "initialvalue", initialvalue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getNewCounterValidateBeforeCall(String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getNewCounter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getNewCounterCall(name, initialvalue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Create new counter and retrieve an access token for it. All counters and tokens have a default TTL of one week. That means, that all data is removed automatically after one week of \&quot;uselessness\&quot;.
     * 
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Token getNewCounter(String name, Long initialvalue) throws ApiException {
        ApiResponse<Token> resp = getNewCounterWithHttpInfo(name, initialvalue);
        return resp.getData();
    }

    /**
     * Create new counter and retrieve an access token for it. All counters and tokens have a default TTL of one week. That means, that all data is removed automatically after one week of \&quot;uselessness\&quot;.
     * 
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Token> getNewCounterWithHttpInfo(String name, Long initialvalue) throws ApiException {
        com.squareup.okhttp.Call call = getNewCounterValidateBeforeCall(name, initialvalue, null, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new counter and retrieve an access token for it. All counters and tokens have a default TTL of one week. That means, that all data is removed automatically after one week of \&quot;uselessness\&quot;. (asynchronously)
     * 
     * @param name The name of the counter (required)
     * @param initialvalue Initial value for the counter, default is 0 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getNewCounterAsync(String name, Long initialvalue, final ApiCallback<Token> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getNewCounterValidateBeforeCall(name, initialvalue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getReadOnlyToken
     * @param token Your access token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getReadOnlyTokenCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/readonly";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getReadOnlyTokenValidateBeforeCall(String token, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling getReadOnlyToken(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getReadOnlyTokenCall(token, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Request read-only access token for that token
     * 
     * @param token Your access token (required)
     * @return Token
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Token getReadOnlyToken(String token) throws ApiException {
        ApiResponse<Token> resp = getReadOnlyTokenWithHttpInfo(token);
        return resp.getData();
    }

    /**
     * Request read-only access token for that token
     * 
     * @param token Your access token (required)
     * @return ApiResponse&lt;Token&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Token> getReadOnlyTokenWithHttpInfo(String token) throws ApiException {
        com.squareup.okhttp.Call call = getReadOnlyTokenValidateBeforeCall(token, null, null);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Request read-only access token for that token (asynchronously)
     * 
     * @param token Your access token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getReadOnlyTokenAsync(String token, final ApiCallback<Token> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getReadOnlyTokenValidateBeforeCall(token, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Token>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for nextNumber
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param increment Value to add to the current counter&#39;s value, default is 1 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call nextNumberCall(String token, String name, Long increment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/next";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (increment != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "increment", increment));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call nextNumberValidateBeforeCall(String token, String name, Long increment, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling nextNumber(Async)");
        }
        
        
        com.squareup.okhttp.Call call = nextNumberCall(token, name, increment, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Increment and get current reading of that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param increment Value to add to the current counter&#39;s value, default is 1 (optional)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counter nextNumber(String token, String name, Long increment) throws ApiException {
        ApiResponse<Counter> resp = nextNumberWithHttpInfo(token, name, increment);
        return resp.getData();
    }

    /**
     * Increment and get current reading of that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param increment Value to add to the current counter&#39;s value, default is 1 (optional)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counter> nextNumberWithHttpInfo(String token, String name, Long increment) throws ApiException {
        com.squareup.okhttp.Call call = nextNumberValidateBeforeCall(token, name, increment, null, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Increment and get current reading of that counter (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param increment Value to add to the current counter&#39;s value, default is 1 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call nextNumberAsync(String token, String name, Long increment, final ApiCallback<Counter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = nextNumberValidateBeforeCall(token, name, increment, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for previousNumber
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param decrement Value to substract from the counter&#39;s current value, default is 1 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call previousNumberCall(String token, String name, Long decrement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/previous";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (decrement != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "decrement", decrement));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call previousNumberValidateBeforeCall(String token, String name, Long decrement, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling previousNumber(Async)");
        }
        
        
        com.squareup.okhttp.Call call = previousNumberCall(token, name, decrement, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Decrement and get current reading of that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param decrement Value to substract from the counter&#39;s current value, default is 1 (optional)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counter previousNumber(String token, String name, Long decrement) throws ApiException {
        ApiResponse<Counter> resp = previousNumberWithHttpInfo(token, name, decrement);
        return resp.getData();
    }

    /**
     * Decrement and get current reading of that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param decrement Value to substract from the counter&#39;s current value, default is 1 (optional)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counter> previousNumberWithHttpInfo(String token, String name, Long decrement) throws ApiException {
        com.squareup.okhttp.Call call = previousNumberValidateBeforeCall(token, name, decrement, null, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Decrement and get current reading of that counter (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param decrement Value to substract from the counter&#39;s current value, default is 1 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call previousNumberAsync(String token, String name, Long decrement, final ApiCallback<Counter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = previousNumberValidateBeforeCall(token, name, decrement, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for resetCounter
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param initialvalue New value for the counter, default is 1 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call resetCounterCall(String token, String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/counter/reset";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (token != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "token", token));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "name", name));
        if (initialvalue != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "initialvalue", initialvalue));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call resetCounterValidateBeforeCall(String token, String name, Long initialvalue, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling resetCounter(Async)");
        }
        
        
        com.squareup.okhttp.Call call = resetCounterCall(token, name, initialvalue, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Reset that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param initialvalue New value for the counter, default is 1 (optional)
     * @return Counter
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Counter resetCounter(String token, String name, Long initialvalue) throws ApiException {
        ApiResponse<Counter> resp = resetCounterWithHttpInfo(token, name, initialvalue);
        return resp.getData();
    }

    /**
     * Reset that counter
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param initialvalue New value for the counter, default is 1 (optional)
     * @return ApiResponse&lt;Counter&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Counter> resetCounterWithHttpInfo(String token, String name, Long initialvalue) throws ApiException {
        com.squareup.okhttp.Call call = resetCounterValidateBeforeCall(token, name, initialvalue, null, null);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Reset that counter (asynchronously)
     * 
     * @param token Your access token (required)
     * @param name Optionally the name of the requested counter, mandatory for grouptokens (optional)
     * @param initialvalue New value for the counter, default is 1 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call resetCounterAsync(String token, String name, Long initialvalue, final ApiCallback<Counter> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = resetCounterValidateBeforeCall(token, name, initialvalue, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Counter>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
